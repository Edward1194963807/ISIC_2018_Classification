!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Activation	src/resnet152.py	/^from keras.layers import Activation$/;"	i
AveragePooling2D	src/resnet152.py	/^from keras.layers import AveragePooling2D$/;"	i
BatchNormalization	src/resnet152.py	/^from keras.layers import BatchNormalization$/;"	i
CNN_Train	src_sy/models/CNN_Train.py	/^class CNN_Train(nn.Module):$/;"	c
Conv2D	src/resnet152.py	/^from keras.layers import Conv2D$/;"	i
DatasetFolder	src_sy/models/CNN_Train.py	/^from DatasetFolder import DatasetFolder$/;"	i
DatasetFolder	src_sy/models/DatasetFolder.py	/^class DatasetFolder(data.Dataset):$/;"	c
Dense	src/resnet152.py	/^from keras.layers import Dense$/;"	i
F	src_sy/models/CNN_Train.py	/^import torch.nn.functional as F$/;"	i
F	src_sy/models/FocalLoss.py	/^import torch.nn.functional as F$/;"	i
F	src_sy/models/focalloss2d.py	/^import torch.nn.functional as F$/;"	i
FLAGS	src/data_utils.py	/^FLAGS = tf.flags.FLAGS$/;"	v
FLAGS	src/train.py	/^FLAGS = tf.flags.FLAGS$/;"	v
FineTuneModel	src_sy/models/FineTune.py	/^class FineTuneModel(nn.Module):$/;"	c
Flatten	src/resnet152.py	/^from keras.layers import Flatten$/;"	i
FocalLoss	src_sy/models/FocalLoss.py	/^class FocalLoss(nn.Module):$/;"	c
FocalLoss2d	src_sy/models/focalloss2d.py	/^class FocalLoss2d(nn.Module):$/;"	c
GPU_ids	src_sy/main.py	/^GPU_ids = 0$/;"	v
GlobalAveragePooling2D	src/resnet152.py	/^from keras.layers import GlobalAveragePooling2D$/;"	i
GlobalMaxPooling2D	src/resnet152.py	/^from keras.layers import GlobalMaxPooling2D$/;"	i
HParams	src/WideResnetModel.py	/^HParams = namedtuple('HParams',$/;"	v
HParams	src/train.py	/^HParams = namedtuple('HParams',$/;"	v
HParams	src/train_v2.py	/^HParams = namedtuple('HParams',$/;"	v
HParams	src/train_v4.py	/^HParams = namedtuple('HParams',$/;"	v
HParams	src/train_v5.py	/^HParams = namedtuple('HParams',$/;"	v
ISIC2018_data	src/data_utils.py	/^class ISIC2018_data():$/;"	c
Image	src_sy/models/DatasetFolder.py	/^from PIL import Image$/;"	i
Input	src/resnet152.py	/^from keras.layers import Input$/;"	i
InputSpec	src/resnet152.py	/^from keras.engine import Layer, InputSpec$/;"	i
K	src/resnet152.py	/^import keras.backend as K$/;"	i
Layer	src/resnet152.py	/^from keras.engine import Layer, InputSpec$/;"	i
MaxPooling2D	src/resnet152.py	/^from keras.layers import MaxPooling2D$/;"	i
Memory	src/memory.py	/^class Memory():$/;"	c
Model	src/resnet152.py	/^from keras.models import Model$/;"	i
Model	src/train_v4.py	/^from keras.models import Model$/;"	i
PCA	src/xg.py	/^from sklearn.decomposition import PCA$/;"	i
ResNet	src/resNet.py	/^class ResNet():$/;"	c
ResNet152	src/resnet152.py	/^def ResNet152(include_top=True, weights=None,$/;"	f
SGD	src/train_v2.py	/^from tensorflow.python.keras.optimizers import SGD$/;"	i
SGD	src/train_v3.py	/^from tensorflow.python.keras.optimizers import SGD$/;"	i
SGD	src/train_v4.py	/^from tensorflow.python.keras.optimizers import SGD$/;"	i
SGD	src/train_v5.py	/^from tensorflow.python.keras.optimizers import SGD$/;"	i
Scale	src/resnet152.py	/^class Scale(Layer):$/;"	c
StandardScaler	src/xg.py	/^    from sklearn.preprocessing import StandardScaler$/;"	i
VGG_MEAN	src/vgg19.py	/^VGG_MEAN = [103.939, 116.779, 123.68]$/;"	v
Variable	src_sy/models/CNN_Train.py	/^from torch.autograd import Variable$/;"	i
Variable	src_sy/models/FocalLoss.py	/^from torch.autograd import Variable$/;"	i
Variable	src_sy/models/focalloss2d.py	/^from torch.autograd import Variable$/;"	i
Vgg19	src/vgg19.py	/^class Vgg19:$/;"	c
WEIGHTS_PATH	src/resnet152.py	/^WEIGHTS_PATH = 'https:\/\/github.com\/adamcasson\/resnet152\/releases\/download\/v0.1\/resnet152_weights_tf.h5'$/;"	v
WEIGHTS_PATH_NO_TOP	src/resnet152.py	/^WEIGHTS_PATH_NO_TOP = 'https:\/\/github.com\/adamcasson\/resnet152\/releases\/download\/v0.1\/resnet152_weights_tf_notop.h5'$/;"	v
WideResNet	src/WideResnetModel.py	/^class WideResNet(object):$/;"	c
ZeroPadding2D	src/resnet152.py	/^from keras.layers import ZeroPadding2D$/;"	i
__getitem__	src_sy/models/DatasetFolder.py	/^    def __getitem__(self, index):$/;"	m	class:DatasetFolder	file:
__init__	auxiliary/process_bar.py	/^    def __init__(self, max_step):$/;"	m	class:process_bar
__init__	auxiliary/statistics.py	/^    def __init__(self, hps, mode='train'):$/;"	m	class:statistics
__init__	auxiliary/timer.py	/^    def __init__(self):$/;"	m	class:timer
__init__	src/WideResnetModel.py	/^    def __init__(self, hps, images, labels, imgids, mode):$/;"	m	class:WideResNet
__init__	src/data_utils.py	/^    def __init__(self, index, num_epoch=None):$/;"	m	class:ISIC2018_data
__init__	src/memory.py	/^    def __init__(self, hps, key_dim=192, memory_size=8192, choose_k=1, alpha=0.1, correct_in_top=1, age_noise=8.0, threshold=0.5):$/;"	m	class:Memory
__init__	src/process_bar.py	/^    def __init__(self, max_step):$/;"	m	class:process_bar
__init__	src/resNet.py	/^    def __init__(self, hps, images, labels, learning_rate, trainable):$/;"	m	class:ResNet
__init__	src/resnet152.py	/^    def __init__(self, weights=None, axis=-1, momentum = 0.9, beta_init='zero', gamma_init='one', **kwargs):$/;"	m	class:Scale
__init__	src/statistics.py	/^    def __init__(self, hps, mode='train'):$/;"	m	class:statistics
__init__	src/vgg19.py	/^    def __init__(self, hps, xs, ys, learning_rate, vgg19_npy_path=None, trainable=True, dropout=0.5):$/;"	m	class:Vgg19
__init__	src_pytorch/statistics.py	/^    def __init__(self, hps, mode='train'):$/;"	m	class:statistics
__init__	src_sy/models/CNN_Train.py	/^    def __init__(self, net, args):$/;"	m	class:CNN_Train
__init__	src_sy/models/DatasetFolder.py	/^    def __init__(self, train=True, transform=None, target_transform=None, data_dir=None):$/;"	m	class:DatasetFolder
__init__	src_sy/models/FineTune.py	/^    def __init__(self, original_model, arch):$/;"	m	class:FineTuneModel
__init__	src_sy/models/FocalLoss.py	/^    def __init__(self, gamma=2, alpha=0.25, size_average=True):$/;"	m	class:FocalLoss
__init__	src_sy/models/focalloss2d.py	/^    def __init__(self, gamma=0, weight=None, size_average=True):$/;"	m	class:FocalLoss2d
__len__	src_sy/models/DatasetFolder.py	/^    def __len__(self):$/;"	m	class:DatasetFolder	file:
_batch_norm	src/WideResnetModel.py	/^    def _batch_norm(self, name, x):$/;"	m	class:WideResNet
_batch_norm	src/resNet.py	/^    def _batch_norm(self, name, x):$/;"	m	class:ResNet
_bottleneck_residual	src/WideResnetModel.py	/^    def _bottleneck_residual(self, x, in_filter, out_filter, stride):$/;"	m	class:WideResNet
_bottleneck_residual	src/resNet.py	/^    def _bottleneck_residual(self, x, in_filter, out_filter, stride, activate_before_residual=False):$/;"	m	class:ResNet
_build_model	src/WideResnetModel.py	/^    def _build_model(self):$/;"	m	class:WideResNet
_build_model	src/resNet.py	/^    def _build_model(self):$/;"	m	class:ResNet
_build_model	src/vgg19.py	/^    def _build_model(self, train_mode=None):$/;"	m	class:Vgg19
_build_train_op	src/WideResnetModel.py	/^    def _build_train_op(self):$/;"	m	class:WideResNet
_build_train_op	src/resNet.py	/^    def _build_train_op(self):$/;"	m	class:ResNet
_build_train_op	src/vgg19.py	/^    def _build_train_op(self):$/;"	m	class:Vgg19
_bytes_feature	src/data_utils.py	/^        def _bytes_feature(value):$/;"	f	function:ISIC2018_data._write_record
_conv	src/WideResnetModel.py	/^    def _conv(self, name, x, filter_size, in_filters, out_filters, strides):$/;"	m	class:WideResNet
_conv	src/resNet.py	/^    def _conv(self, name, x, filter_size, in_filters, out_filters, strides):$/;"	m	class:ResNet
_decay	src/WideResnetModel.py	/^    def _decay(self):$/;"	m	class:WideResNet
_decay	src/resNet.py	/^    def _decay(self):$/;"	m	class:ResNet
_decay	src/vgg19.py	/^    def _decay(self):$/;"	m	class:Vgg19
_focal_loss	src/resNet.py	/^    def _focal_loss(self, labels, logits, gamma=2.0, alpha=4.0):$/;"	m	class:ResNet
_fully_connected	src/WideResnetModel.py	/^    def _fully_connected(self, x, out_dim):$/;"	m	class:WideResNet
_fully_connected	src/resNet.py	/^    def _fully_connected(self, x, out_dim):$/;"	m	class:ResNet
_fully_connected	src/vgg19.py	/^    def _fully_connected(self, x, out_dim, name):$/;"	m	class:Vgg19
_get_conv_var	src/resNet.py	/^    def _get_conv_var(self, filter_size, in_filters, out_filters, name):$/;"	m	class:ResNet
_get_var	src/resNet.py	/^    def _get_var(self, initial_value, name, var_name):$/;"	m	class:ResNet
_global_avg_pool	src/WideResnetModel.py	/^    def _global_avg_pool(self, x):$/;"	m	class:WideResNet
_global_avg_pool	src/resNet.py	/^    def _global_avg_pool(self, x):$/;"	m	class:ResNet
_int64_feature	src/data_utils.py	/^        def _int64_feature(value):$/;"	f	function:ISIC2018_data._write_record
_load_img	src/data_utils.py	/^        def _load_img(img_path):$/;"	f	function:ISIC2018_data._write_record
_median_weight_class_loss	src/resNet.py	/^    def _median_weight_class_loss(self, labels, logits):$/;"	m	class:ResNet
_obtain_input_shape	src/resnet152.py	/^from keras.applications.imagenet_utils import _obtain_input_shape$/;"	i
_parse_function	src/data_utils.py	/^        def _parse_function(example_proto):$/;"	f	function:ISIC2018_data.read_record
_pre_process_images	src/data_utils.py	/^    def _pre_process_images(self, x, is_train=True):$/;"	m	class:ISIC2018_data
_pre_process_images	src/resNet.py	/^    def _pre_process_images(self, x):$/;"	m	class:ResNet
_pre_process_images	src/vgg19.py	/^    def _pre_process_images(self, x):$/;"	m	class:Vgg19
_preprocess_train	src/data_utils.py	/^        def _preprocess_train(image, label, name):$/;"	f	function:ISIC2018_data.read_record
_preprocess_valid	src/data_utils.py	/^        def _preprocess_valid(image, label, name):$/;"	f	function:ISIC2018_data.read_record
_read_csv	src/data_utils.py	/^        def _read_csv(filename):$/;"	f	function:ISIC2018_data.write_record
_read_record	src/data_utils.py	/^        def _read_record(path, min_queue_examples=2000, is_train=True, num_epochs=None):$/;"	f	function:ISIC2018_data.read_record
_relu	src/WideResnetModel.py	/^    def _relu(self, x):$/;"	m	class:WideResNet
_relu	src/resNet.py	/^    def _relu(self, x, leakiness=0.0):$/;"	m	class:ResNet
_residual	src/resNet.py	/^    def _residual(self, x, in_filter, out_filter, stride,$/;"	m	class:ResNet
_save_triples	auxiliary/statistics.py	/^    def _save_triples(self, filename, data, epoch)$/;"	m	class:statistics
_save_triples	src/statistics.py	/^    def _save_triples(self, filename, data, epoch):$/;"	m	class:statistics
_save_triples	src_pytorch/statistics.py	/^    def _save_triples(self, filename, data, epoch):$/;"	m	class:statistics
_set_valid_index	src/data_utils.py	/^    def _set_valid_index(self, i):$/;"	m	class:ISIC2018_data
_stride_arr	src/WideResnetModel.py	/^    def _stride_arr(self, stride):$/;"	m	class:WideResNet
_stride_arr	src/resNet.py	/^    def _stride_arr(self, stride):$/;"	m	class:ResNet
_write_record	src/data_utils.py	/^    def _write_record(self, labels, images_name, index):$/;"	m	class:ISIC2018_data
accimage	src_sy/models/DatasetFolder.py	/^    import accimage$/;"	i
accimage_loader	src_sy/models/DatasetFolder.py	/^def accimage_loader(path):$/;"	f
accuracy_score	src/xg.py	/^from sklearn.metrics import accuracy_score, precision_score, recall_score$/;"	i
accuracy_test	src/xg.py	/^    accuracy_test = accuracy_score(label_test, predictions_test)$/;"	v
accuracy_train	src/xg.py	/^    accuracy_train = accuracy_score(label_train, predictions_train)$/;"	v
add	src/resnet152.py	/^from keras.layers import add$/;"	i
add_labels_predictions	auxiliary/statistics.py	/^    def add_labels_predictions(self, labels, predictions, path):$/;"	m	class:statistics
add_labels_predictions	src/statistics.py	/^    def add_labels_predictions(self, labels, predictions, path=None, one_hot=False):$/;"	m	class:statistics
add_labels_predictions	src_pytorch/statistics.py	/^    def add_labels_predictions(self, labels, predictions, path=None, one_hot=False):$/;"	m	class:statistics
argparse	src_sy/main.py	/^import argparse$/;"	i
argparse	src_sy/models/CNN_Train.py	/^import argparse$/;"	i
args	src/train_v3.py	/^    args = sys.argv[1]$/;"	v
args	src_sy/main.py	/^args = parser.parse_args()$/;"	v
auxiliary	src/train.py	/^    import auxiliary.statistics as statistics$/;"	i
auxiliary	src/train.py	/^    import auxiliary.timer as timer$/;"	i
avg_pool	src/vgg19.py	/^    def avg_pool(self, bottom, name):$/;"	m	class:Vgg19
backends	src_sy/models/CNN_Train.py	/^import torch.backends.cudnn as cudnn$/;"	i
batch_flatten	src/xg.py	/^def batch_flatten(batch_arr):$/;"	f
batch_size	src_sy/main.py	/^batch_size = 30$/;"	v
build	src/resnet152.py	/^    def build(self, input_shape):$/;"	m	class:Scale
build_graph	src/WideResnetModel.py	/^    def build_graph(self):$/;"	m	class:WideResNet
build_graph	src/resNet.py	/^    def build_graph(self):$/;"	m	class:ResNet
build_graph	src/vgg19.py	/^    def build_graph(self, train_mode=None):$/;"	m	class:Vgg19
call	src/resnet152.py	/^    def call(self, x, mask=None):$/;"	m	class:Scale
cc	src/data.py	/^import color_constancy as cc$/;"	i
cnt	src/data.py	/^cnt = int(sys.argv[1])$/;"	v
coloredlogs	src/train.py	/^import coloredlogs$/;"	i
conv_block	src/resnet152.py	/^def conv_block(input_tensor, kernel_size, filters, stage, block, strides=(2, 2)):$/;"	f
conv_layer	src/vgg19.py	/^    def conv_layer(self, bottom, in_channels, out_channels, name):$/;"	m	class:Vgg19
copy	src_pytorch/train_pytorch.py	/^import copy$/;"	i
copyfile	src_pytorch/cpdata.py	/^from shutil import copyfile$/;"	i
cp_file	src_pytorch/cpdata.py	/^def cp_file(images_name, labels, train=True):$/;"	f
csv	src_sy/models/DatasetFolder.py	/^import csv$/;"	i
cudnn	src_sy/models/CNN_Train.py	/^import torch.backends.cudnn as cudnn$/;"	i
cv	src/data.py	/^import cv2 as cv$/;"	i
cv	src/data_utils.py	/^import cv2 as cv$/;"	i
cv2	src/color_constancy.py	/^import cv2$/;"	i
data	src_sy/models/DatasetFolder.py	/^import torch.utils.data as data$/;"	i
data_dir	src/data.py	/^data_dir = '..\/data\/ISIC2018\/ISIC2018_Task3_Training_Input\/'$/;"	v
data_test	src/xg.py	/^    data_test = np.load(features_path + "images_feature_with_labels_from_vgg16_evaluate.npy")$/;"	v
data_train	src/xg.py	/^    data_train = np.load(features_path + "images_feature_with_labels_from_vgg16_train.npy")$/;"	v
data_utils	src/test_Record.py	/^import data_utils$/;"	i
data_utils	src/train.py	/^import data_utils$/;"	i
data_utils	src/train_v2.py	/^import data_utils$/;"	i
data_utils	src/train_v3.py	/^import data_utils$/;"	i
data_utils	src/train_v4.py	/^import data_utils$/;"	i
data_utils	src/train_v5.py	/^import data_utils$/;"	i
datasets	src_pytorch/train_pytorch.py	/^from torchvision import datasets, models, transforms$/;"	i
datetime	auxiliary/timer.py	/^from datetime import datetime$/;"	i
datetime	src/statistics.py	/^from datetime import datetime$/;"	i
datetime	src/train.py	/^from datetime import datetime$/;"	i
datetime	src_pytorch/statistics.py	/^from datetime import datetime$/;"	i
decode_predictions	src/resnet152.py	/^from keras.applications.imagenet_utils import decode_predictions$/;"	i
default_loader	src_sy/models/DatasetFolder.py	/^def default_loader(path):$/;"	f
dsets	src_sy/models/CNN_Train.py	/^import torchvision.datasets as dsets$/;"	i
error	src/train.py	/^    print('import from parent_folder error')$/;"	i
evaluate	src/train.py	/^def evaluate(hps):$/;"	f
fc_layer	src/vgg19.py	/^    def fc_layer(self, bottom, in_size, out_size, name):$/;"	m	class:Vgg19
features_path	src/xg.py	/^    features_path = "\/home\/jiaxin\/myGithub\/Reverse_CISI_Classification\/src\/"$/;"	v
features_test	src/xg.py	/^    features_test = batch_flatten(data_test[0])$/;"	v
features_test	src/xg.py	/^    features_test = scaler.transform(features_test)$/;"	v
features_train	src/xg.py	/^    features_train = batch_flatten(data_train[0])$/;"	v
features_train	src/xg.py	/^    features_train = scaler.transform(features_train)$/;"	v
focal_loss	src/train_v2.py	/^def focal_loss(labels, logits):$/;"	f
focal_loss	src/train_v4.py	/^def focal_loss(labels, logits):$/;"	f
focal_loss	src/train_v5.py	/^def focal_loss(labels, logits):$/;"	f
forward	src_sy/models/FineTune.py	/^    def forward(self, x):$/;"	m	class:FineTuneModel
forward	src_sy/models/FocalLoss.py	/^    def forward(self, input, target):$/;"	m	class:FocalLoss
forward	src_sy/models/focalloss2d.py	/^    def forward(self, input, target):$/;"	m	class:FocalLoss2d
from	src/train.py	/^    print('import from parent_folder error')$/;"	i
general_gray_world	src/color_constancy.py	/^def general_gray_world(img, power=2, sigma=3):$/;"	f
generate_record	src/data_utils.py	/^def generate_record():$/;"	f
getIdx	src_sy/models/DatasetFolder.py	/^def getIdx(lblarr, consider_lbl, ptrain):$/;"	f
getMCA	src_sy/models/CNN_Train.py	/^    def getMCA(self,correct, predicted):$/;"	m	class:CNN_Train
get_acc_imbalanced	auxiliary/statistics.py	/^    def get_acc_imbalanced(self):$/;"	m	class:statistics
get_acc_imbalanced	src/statistics.py	/^    def get_acc_imbalanced(self):$/;"	m	class:statistics
get_acc_imbalanced	src_pytorch/statistics.py	/^    def get_acc_imbalanced(self):$/;"	m	class:statistics
get_acc_normal	auxiliary/statistics.py	/^    def get_acc_normal(self):$/;"	m	class:statistics
get_acc_normal	src/statistics.py	/^    def get_acc_normal(self):$/;"	m	class:statistics
get_acc_normal	src_pytorch/statistics.py	/^    def get_acc_normal(self):$/;"	m	class:statistics
get_config	src/resnet152.py	/^    def get_config(self):$/;"	m	class:Scale
get_conv_var	src/vgg19.py	/^    def get_conv_var(self, filter_size, in_channels, out_channels, name):$/;"	m	class:Vgg19
get_duration	auxiliary/timer.py	/^    def get_duration(self):$/;"	m	class:timer
get_fc_var	src/vgg19.py	/^    def get_fc_var(self, in_size, out_size, name):$/;"	m	class:Vgg19
get_file	src/resnet152.py	/^from keras.utils.data_utils import get_file$/;"	i
get_hint_pool_idxs	src/memory.py	/^    def get_hint_pool_idxs(self, normalized_query):$/;"	m	class:Memory
get_image_backend	src_sy/models/DatasetFolder.py	/^    from torchvision import get_image_backend$/;"	i
get_loaders	src_sy/models/CNN_Train.py	/^    def get_loaders(self):$/;"	m	class:CNN_Train
get_model	src/model.py	/^def get_model(hps, xs, ys, learning_rate, trainable):$/;"	f
get_print_precision	auxiliary/statistics.py	/^    def get_print_precision(self):$/;"	m	class:statistics
get_print_precision	src/statistics.py	/^    def get_print_precision(self):$/;"	m	class:statistics
get_print_precision	src_pytorch/statistics.py	/^    def get_print_precision(self):$/;"	m	class:statistics
get_set	src_pytorch/cpdata.py	/^def get_set(filename):$/;"	f
get_source_inputs	src/resnet152.py	/^from keras.engine.topology import get_source_inputs$/;"	i
get_var	src/vgg19.py	/^    def get_var(self, initial_value, name, idx, var_name):$/;"	m	class:Vgg19
get_var_count	src/vgg19.py	/^    def get_var_count(self):$/;"	m	class:Vgg19
gpu	src/train_v3.py	/^    gpu = sys.argv[2]$/;"	v
gray_world	src/color_constancy.py	/^def gray_world(img):$/;"	f
hps	src/train_v2.py	/^hps = HParams($/;"	v
hps	src/train_v4.py	/^hps = HParams($/;"	v
hps	src/train_v5.py	/^hps = HParams($/;"	v
identity_block	src/resnet152.py	/^def identity_block(input_tensor, kernel_size, filters, stage, block):$/;"	f
image	src/resnet152.py	/^from keras.preprocessing import image$/;"	i
image_np	src/data.py	/^    image_np = cv.imread(image_path)$/;"	v
image_path	src/data.py	/^    image_path = os.path.join(data_dir, img)$/;"	v
img	src/resnet152.py	/^    img = image.load_img(img_path, target_size=(224,224))$/;"	v
img_path	src/resnet152.py	/^    img_path = 'elephant.jpg'$/;"	v
inception_v3	src/train_v2.py	/^from tensorflow.python.keras.applications import inception_v3$/;"	i
inception_v3	src/train_v5.py	/^from tensorflow.python.keras.applications import inception_v3$/;"	i
initializers	src/resnet152.py	/^from keras import initializers$/;"	i
inputs	src_sy/models/FocalLoss.py	/^    inputs = Variable(torch.randn((10, 2)))$/;"	v	class:FocalLoss
iterate_CNN	src_sy/models/CNN_Train.py	/^    def iterate_CNN(self):$/;"	m	class:CNN_Train
k_fold	src_pytorch/cpdata.py	/^k_fold=5$/;"	v
keras	src/resnet152.py	/^import keras.backend as K$/;"	i
label_test	src/xg.py	/^    label_test = batch_flatten(data_test[1])$/;"	v
label_train	src/xg.py	/^    label_train = batch_flatten(data_train[1])$/;"	v
layer_utils	src/resnet152.py	/^from keras.utils import layer_utils$/;"	i
layers	src/train_v2.py	/^from tensorflow.python.keras import layers$/;"	i
layers	src/train_v3.py	/^from tensorflow.python.keras import layers$/;"	i
layers	src/train_v4.py	/^from tensorflow.python.keras import layers$/;"	i
layers	src/train_v5.py	/^from tensorflow.python.keras import layers$/;"	i
load	src/test_Record.py	/^def load(iter_x, iter_y, init):$/;"	f
logging	src/data_utils.py	/^import logging$/;"	i
loss	src_sy/models/FocalLoss.py	/^    loss = FocalLoss()(inputs, targets)$/;"	v	class:FocalLoss
losses	src/train_v2.py	/^from tensorflow.python.keras import losses$/;"	i
losses	src/train_v3.py	/^from tensorflow.python.keras import losses$/;"	i
losses	src/train_v4.py	/^from tensorflow.python.keras import losses$/;"	i
losses	src/train_v5.py	/^from tensorflow.python.keras import losses$/;"	i
lr	src_sy/main.py	/^lr = 0.01\/100$/;"	v
lr_scheduler	src_pytorch/train_pytorch.py	/^from torch.optim import lr_scheduler$/;"	i
main	src/train.py	/^def main(argv=None):$/;"	f
main	src/train_v2.py	/^def main(mode='train', gpu='0'):$/;"	f
main	src/train_v3.py	/^def main(mode='train', gpu='0'):$/;"	f
main	src/train_v4.py	/^def main(mode='train', gpu='0'):$/;"	f
main	src/train_v5.py	/^def main(mode='train', gpu='0'):$/;"	f
main	src_pytorch/train_pytorch.py	/^def main():$/;"	f
make_dataset	src_sy/models/DatasetFolder.py	/^def make_dataset(ptrain, data_dir):$/;"	f
make_update_op	src/memory.py	/^        def make_update_op():$/;"	f	function:Memory.query_and_make_update
make_update_op	src/memory.py	/^    def make_update_op(self, upd_idxs, upd_keys, upd_vals, batch_size):$/;"	m	class:Memory
math	auxiliary/process_bar.py	/^import math$/;"	i
math	src/process_bar.py	/^import math$/;"	i
matplotlib	src/xg.py	/^import matplotlib$/;"	i
max_pool	src/vgg19.py	/^    def max_pool(self, bottom, name):$/;"	m	class:Vgg19
median_weight_class_loss	src/train_v2.py	/^def median_weight_class_loss(labels, logits):$/;"	f
median_weight_class_loss	src/train_v4.py	/^def median_weight_class_loss(labels, logits):$/;"	f
median_weight_class_loss	src/train_v5.py	/^def median_weight_class_loss(labels, logits):$/;"	f
memory	src/train.py	/^import memory$/;"	i
metrics	src/train_v2.py	/^from keras import metrics$/;"	i
metrics	src/train_v3.py	/^from keras import metrics$/;"	i
metrics	src/train_v4.py	/^from keras import metrics$/;"	i
metrics	src/train_v5.py	/^from keras import metrics$/;"	i
model	src/resnet152.py	/^    model = ResNet152(include_top=True, weights='imagenet')$/;"	v
model	src/train.py	/^import model$/;"	i
model	src_sy/main.py	/^model = args.model$/;"	v
models	src/train_v2.py	/^from tensorflow.python.keras import models$/;"	i
models	src/train_v3.py	/^from tensorflow.python.keras import models$/;"	i
models	src/train_v4.py	/^from tensorflow.python.keras import models$/;"	i
models	src/train_v5.py	/^from tensorflow.python.keras import models$/;"	i
models	src_pytorch/train_pytorch.py	/^from torchvision import datasets, models, transforms$/;"	i
models	src_pytorch/train_pytorch.py	/^from torchvision import models$/;"	i
moving_averages	src/WideResnetModel.py	/^from tensorflow.python.training import moving_averages$/;"	i
moving_averages	src/resNet.py	/^from tensorflow.python.training import moving_averages$/;"	i
n_epochs	src_sy/main.py	/^n_epochs = 501$/;"	v
namedtuple	src/WideResnetModel.py	/^from collections import namedtuple$/;"	i
namedtuple	src/resNet.py	/^from collections import namedtuple$/;"	i
namedtuple	src/train.py	/^from collections import namedtuple$/;"	i
namedtuple	src/train_v2.py	/^from collections import namedtuple$/;"	i
namedtuple	src/train_v3.py	/^from collections import namedtuple$/;"	i
namedtuple	src/train_v4.py	/^from collections import namedtuple$/;"	i
namedtuple	src/train_v5.py	/^from collections import namedtuple$/;"	i
nclass	src_sy/main.py	/^nclass = 7$/;"	v
net	src_sy/main.py	/^net = FineTuneModel(original_model, model)$/;"	v
new_image_np	src/data.py	/^    new_image_np = cc.shade_of_gray(image_np, power=cnt)$/;"	v
nn	src_pytorch/train_pytorch.py	/^from torch import nn$/;"	i
nn	src_pytorch/train_pytorch.py	/^import torch.nn as nn$/;"	i
nn	src_sy/main.py	/^import torch.nn as nn$/;"	i
nn	src_sy/models/CNN_Train.py	/^import torch.nn as nn$/;"	i
nn	src_sy/models/CNN_Train.py	/^import torch.nn.functional as F$/;"	i
nn	src_sy/models/FineTune.py	/^import torch.nn as nn$/;"	i
nn	src_sy/models/FocalLoss.py	/^import torch.nn as nn$/;"	i
nn	src_sy/models/FocalLoss.py	/^import torch.nn.functional as F$/;"	i
nn	src_sy/models/focalloss2d.py	/^import torch.nn as nn$/;"	i
nn	src_sy/models/focalloss2d.py	/^import torch.nn.functional as F$/;"	i
np	auxiliary/statistics.py	/^import numpy as np$/;"	i
np	src/WideResnetModel.py	/^import numpy as np$/;"	i
np	src/color_constancy.py	/^import numpy as np$/;"	i
np	src/data_utils.py	/^import numpy as np$/;"	i
np	src/resNet.py	/^import numpy as np$/;"	i
np	src/resnet152.py	/^import numpy as np$/;"	i
np	src/statistics.py	/^import numpy as np$/;"	i
np	src/train.py	/^import numpy as np$/;"	i
np	src/train_v2.py	/^import numpy as np$/;"	i
np	src/train_v3.py	/^import numpy as np$/;"	i
np	src/train_v4.py	/^import numpy as np$/;"	i
np	src/train_v5.py	/^import numpy as np$/;"	i
np	src/vgg19.py	/^import numpy as np$/;"	i
np	src/xg.py	/^import numpy as np$/;"	i
np	src_pytorch/cpdata.py	/^import numpy as np$/;"	i
np	src_pytorch/statistics.py	/^import numpy as np$/;"	i
np	src_pytorch/train_pytorch.py	/^import numpy as np$/;"	i
np	src_sy/models/CNN_Train.py	/^import numpy as np$/;"	i
np	src_sy/models/DatasetFolder.py	/^import numpy as np$/;"	i
num_classes	src/train_v2.py	/^     num_classes=7)$/;"	v
num_classes	src/train_v4.py	/^     num_classes=7)$/;"	v
num_classes	src/train_v5.py	/^     num_classes=7)$/;"	v
optim	src_pytorch/train_pytorch.py	/^from torch import optim$/;"	i
optim	src_pytorch/train_pytorch.py	/^import torch.optim as optim$/;"	i
optim	src_sy/models/CNN_Train.py	/^import torch.optim as optim$/;"	i
original_model	src_sy/main.py	/^    original_model = pretrainedmodels.inceptionresnetv2(pretrained='imagenet')$/;"	v
original_model	src_sy/main.py	/^    original_model = torchvision.models.densenet161(pretrained=True)$/;"	v
original_model	src_sy/main.py	/^    original_model = torchvision.models.resnet152(pretrained=True)$/;"	v
original_model	src_sy/main.py	/^    original_model = torchvision.models.resnet50(pretrained=True)$/;"	v
original_model	src_sy/main.py	/^    original_model = torchvision.models.squeezenet1_0(pretrained=True)$/;"	v
original_model	src_sy/main.py	/^    original_model = torchvision.models.vgg16(pretrained=True)$/;"	v
os	src/color_constancy.py	/^import os$/;"	i
os	src/data.py	/^import os$/;"	i
os	src/data_utils.py	/^import os$/;"	i
os	src/train.py	/^import os, sys$/;"	i
os	src/train_v2.py	/^import os, sys$/;"	i
os	src/train_v3.py	/^import os, sys$/;"	i
os	src/train_v4.py	/^import os, sys$/;"	i
os	src/train_v5.py	/^import os, sys$/;"	i
os	src_pytorch/cpdata.py	/^import os$/;"	i
os	src_pytorch/train_pytorch.py	/^import os, sys$/;"	i
os	src_sy/main.py	/^import os$/;"	i
os	src_sy/models/DatasetFolder.py	/^import os$/;"	i
output_dir	src/data.py	/^output_dir = '..\/data\/sog6_{}'.format(cnt)$/;"	v
output_path	src/data.py	/^    output_path = os.path.join(output_dir, img)$/;"	v
parent_folder	src/train.py	/^    print('import from parent_folder error')$/;"	i
parent_path	src/train.py	/^parent_path = os.path.abspath('..\/')$/;"	v
parent_path	src/train_v2.py	/^parent_path = os.path.abspath('..\/')$/;"	v
parent_path	src/train_v3.py	/^parent_path = os.path.abspath('..\/')$/;"	v
parent_path	src/train_v4.py	/^parent_path = os.path.abspath('..\/')$/;"	v
parent_path	src/train_v5.py	/^parent_path = os.path.abspath('..\/')$/;"	v
parser	src_sy/main.py	/^parser = argparse.ArgumentParser(description='Densenet')$/;"	v
pd	auxiliary/statistics.py	/^import pandas as pd$/;"	i
pd	src/data_utils.py	/^import pandas as pd$/;"	i
pd	src/statistics.py	/^import pandas as pd$/;"	i
pd	src/train.py	/^import pandas as pd$/;"	i
pd	src_pytorch/cpdata.py	/^import pandas as pd$/;"	i
pd	src_pytorch/statistics.py	/^import pandas as pd$/;"	i
pil_loader	src_sy/models/DatasetFolder.py	/^def pil_loader(path):$/;"	f
plot_importance	src/xg.py	/^from xgboost import plot_importance$/;"	i
plt	src/color_constancy.py	/^from matplotlib import pyplot as plt$/;"	i
plt	src/xg.py	/^from matplotlib import pyplot as plt$/;"	i
precision_score	src/xg.py	/^from sklearn.metrics import accuracy_score, precision_score, recall_score$/;"	i
pred_test	src/xg.py	/^    pred_test = xgc.predict(features_test)$/;"	v
pred_train	src/xg.py	/^    pred_train = xgc.predict(features_train)$/;"	v
predictions_test	src/xg.py	/^    predictions_test = [round(value) for value in pred_test]$/;"	v
predictions_train	src/xg.py	/^    predictions_train = [round(value) for value in pred_train]$/;"	v
preds	src/resnet152.py	/^    preds = model.predict(x)$/;"	v
preprocess_input	src/resnet152.py	/^from keras.applications.imagenet_utils import preprocess_input$/;"	i
pretrainedmodels	src_sy/main.py	/^import pretrainedmodels$/;"	i
print_function	src_sy/models/CNN_Train.py	/^from __future__ import print_function$/;"	i
print_net	src_sy/models/CNN_Train.py	/^    def print_net(self):$/;"	m	class:CNN_Train
process_bar	auxiliary/process_bar.py	/^class process_bar():$/;"	c
process_bar	src/data.py	/^import process_bar$/;"	i
process_bar	src/data_utils.py	/^import process_bar$/;"	i
process_bar	src/process_bar.py	/^class process_bar():$/;"	c
process_bar_	src/data.py	/^process_bar_ = process_bar.process_bar(10015)$/;"	v
query	src/memory.py	/^    def query(self, query_vec):$/;"	m	class:Memory
query_and_make_update	src/memory.py	/^    def query_and_make_update(self, query_vec, intended_output):$/;"	m	class:Memory
random	src_sy/models/DatasetFolder.py	/^import random$/;"	i
read_record	src/data_utils.py	/^    def read_record(self, mode='train'):$/;"	m	class:ISIC2018_data
recall_score	src/xg.py	/^from sklearn.metrics import accuracy_score, precision_score, recall_score$/;"	i
reduce	src/vgg19.py	/^from functools import reduce$/;"	i
resNet	src/model.py	/^import resNet$/;"	i
reset	auxiliary/process_bar.py	/^    def reset(self):$/;"	m	class:process_bar
reset	src/process_bar.py	/^    def reset(self):$/;"	m	class:process_bar
resnet	src/train_v2.py	/^import resnet$/;"	i
resnet	src/train_v5.py	/^import resnet$/;"	i
resnet152	src/train_v4.py	/^import resnet152$/;"	i
resnet50	src/train_v2.py	/^from tensorflow.python.keras.applications import resnet50$/;"	i
resnet50	src/train_v3.py	/^from tensorflow.python.keras.applications import resnet50$/;"	i
resnet50	src/train_v4.py	/^from tensorflow.python.keras.applications import resnet50$/;"	i
resnet50	src/train_v5.py	/^from tensorflow.python.keras.applications import resnet50$/;"	i
save_npy	src/vgg19.py	/^    def save_npy(self, sess, npy_path=".\/vgg19-save.npy"):$/;"	m	class:Vgg19
save_triples	auxiliary/statistics.py	/^    def save_triples(self, filename):$/;"	m	class:statistics
save_triples	src/statistics.py	/^    def save_triples(self, filename):$/;"	m	class:statistics
save_triples	src_pytorch/statistics.py	/^    def save_triples(self, filename):$/;"	m	class:statistics
scaler	src/xg.py	/^    scaler = StandardScaler()$/;"	v
set_maxstep	auxiliary/process_bar.py	/^    def set_maxstep(self, max_step_):$/;"	m	class:process_bar
set_maxstep	src/process_bar.py	/^    def set_maxstep(self, max_step_):$/;"	m	class:process_bar
sets	src_pytorch/cpdata.py	/^sets = get_set('..\/data\/ISIC2018\/split_data.csv')$/;"	v
shade_of_gray	src/color_constancy.py	/^def shade_of_gray(img, power=6, gamma=None):$/;"	f
show_process	auxiliary/process_bar.py	/^    def show_process(self, i=None):$/;"	m	class:process_bar
show_process	src/process_bar.py	/^    def show_process(self, i=None):$/;"	m	class:process_bar
shuffle	src/xg.py	/^    from sklearn.utils import shuffle$/;"	i
statistics	auxiliary/statistics.py	/^class statistics():$/;"	c
statistics	src/statistics.py	/^class statistics():$/;"	c
statistics	src/train.py	/^    import auxiliary.statistics as statistics$/;"	i
statistics	src/train_v2.py	/^import statistics$/;"	i
statistics	src/train_v3.py	/^import statistics$/;"	i
statistics	src/train_v4.py	/^import statistics$/;"	i
statistics	src/train_v5.py	/^import statistics$/;"	i
statistics	src_pytorch/statistics.py	/^class statistics():$/;"	c
statistics	src_pytorch/train_pytorch.py	/^import statistics$/;"	i
sys	auxiliary/process_bar.py	/^import sys$/;"	i
sys	src/data.py	/^import sys$/;"	i
sys	src/data_utils.py	/^import sys$/;"	i
sys	src/model.py	/^import sys$/;"	i
sys	src/process_bar.py	/^import sys$/;"	i
sys	src/resnet152.py	/^import sys$/;"	i
sys	src/train.py	/^import os, sys$/;"	i
sys	src/train_v2.py	/^import os, sys$/;"	i
sys	src/train_v3.py	/^import os, sys$/;"	i
sys	src/train_v4.py	/^import os, sys$/;"	i
sys	src/train_v5.py	/^import os, sys$/;"	i
sys	src_pytorch/train_pytorch.py	/^import os, sys$/;"	i
sys	src_sy/main.py	/^import sys$/;"	i
targets	src_sy/models/FocalLoss.py	/^    targets = Variable(torch.LongTensor(10).random_(2))$/;"	v	class:FocalLoss
test	src_sy/models/CNN_Train.py	/^    def test(self, epoch):$/;"	m	class:CNN_Train
test_record	src/data_utils.py	/^def test_record():$/;"	f
test_record	src/test_Record.py	/^def test_record():$/;"	f
tf	auxiliary/statistics.py	/^import tensorflow as tf$/;"	i
tf	src/WideResnetModel.py	/^import tensorflow as tf$/;"	i
tf	src/data_utils.py	/^import tensorflow as tf$/;"	i
tf	src/memory.py	/^import tensorflow as tf$/;"	i
tf	src/resNet.py	/^import tensorflow as tf$/;"	i
tf	src/statistics.py	/^import tensorflow as tf$/;"	i
tf	src/test_Record.py	/^import tensorflow as tf$/;"	i
tf	src/train.py	/^import tensorflow as tf$/;"	i
tf	src/train_v2.py	/^import tensorflow as tf$/;"	i
tf	src/train_v3.py	/^import tensorflow as tf$/;"	i
tf	src/train_v4.py	/^import tensorflow as tf$/;"	i
tf	src/train_v5.py	/^import tensorflow as tf$/;"	i
tf	src/vgg19.py	/^import tensorflow as tf$/;"	i
tf	src_pytorch/statistics.py	/^import tensorflow as tf$/;"	i
time	auxiliary/timer.py	/^import time$/;"	i
time	src/train.py	/^import time$/;"	i
time	src/train_v2.py	/^import time$/;"	i
time	src/train_v3.py	/^import time$/;"	i
time	src/train_v4.py	/^import time$/;"	i
time	src/train_v5.py	/^import time$/;"	i
time	src/xg.py	/^import time$/;"	i
time	src_pytorch/train_pytorch.py	/^import time$/;"	i
timedelta	auxiliary/timer.py	/^from datetime import timedelta$/;"	i
timer	auxiliary/timer.py	/^class timer():$/;"	c
timer	src/test_Record.py	/^import timer$/;"	i
timer	src/train.py	/^    import auxiliary.timer as timer$/;"	i
torch	src_pytorch/train_pytorch.py	/^import torch$/;"	i
torch	src_pytorch/train_pytorch.py	/^import torch.nn as nn$/;"	i
torch	src_pytorch/train_pytorch.py	/^import torch.optim as optim$/;"	i
torch	src_sy/main.py	/^import torch.nn as nn$/;"	i
torch	src_sy/models/CNN_Train.py	/^import torch$/;"	i
torch	src_sy/models/CNN_Train.py	/^import torch.backends.cudnn as cudnn$/;"	i
torch	src_sy/models/CNN_Train.py	/^import torch.nn as nn$/;"	i
torch	src_sy/models/CNN_Train.py	/^import torch.nn.functional as F$/;"	i
torch	src_sy/models/CNN_Train.py	/^import torch.optim as optim$/;"	i
torch	src_sy/models/DatasetFolder.py	/^import torch.utils.data as data$/;"	i
torch	src_sy/models/FineTune.py	/^import torch$/;"	i
torch	src_sy/models/FineTune.py	/^import torch.nn as nn$/;"	i
torch	src_sy/models/FocalLoss.py	/^import torch$/;"	i
torch	src_sy/models/FocalLoss.py	/^import torch.nn as nn$/;"	i
torch	src_sy/models/FocalLoss.py	/^import torch.nn.functional as F$/;"	i
torch	src_sy/models/focalloss2d.py	/^import torch$/;"	i
torch	src_sy/models/focalloss2d.py	/^import torch.nn as nn$/;"	i
torch	src_sy/models/focalloss2d.py	/^import torch.nn.functional as F$/;"	i
torchvision	src_pytorch/train_pytorch.py	/^import torchvision$/;"	i
torchvision	src_sy/main.py	/^import torchvision$/;"	i
torchvision	src_sy/models/CNN_Train.py	/^import torchvision$/;"	i
torchvision	src_sy/models/CNN_Train.py	/^import torchvision.datasets as dsets$/;"	i
torchvision	src_sy/models/CNN_Train.py	/^import torchvision.transforms as transforms$/;"	i
train	src/train.py	/^def train(hps, val_index):$/;"	f
train	src_sy/models/CNN_Train.py	/^    def train(self, epoch):$/;"	m	class:CNN_Train
train_model	src_pytorch/train_pytorch.py	/^def train_model(model, criterion, optimizer, scheduler, num_epochs=25):$/;"	f
train_time_end	src/xg.py	/^    train_time_end = time.time();$/;"	v
train_time_start	src/xg.py	/^    train_time_start = time.time()$/;"	v
transforms	src_pytorch/train_pytorch.py	/^from torchvision import datasets, models, transforms$/;"	i
transforms	src_pytorch/train_pytorch.py	/^from torchvision import transforms$/;"	i
transforms	src_sy/models/CNN_Train.py	/^import torchvision.transforms as transforms$/;"	i
utils	src_sy/models/DatasetFolder.py	/^import torch.utils.data as data$/;"	i
warnings	src/resnet152.py	/^import warnings$/;"	i
white_patch_retinex	src/color_constancy.py	/^def white_patch_retinex(img, para):$/;"	f
write_record	src/data_utils.py	/^    def write_record(self, prefix_directory=FLAGS.ISIC2018, filenames='split_data.csv'):$/;"	m	class:ISIC2018_data
x	src/resnet152.py	/^    x = image.img_to_array(img)$/;"	v
x	src/resnet152.py	/^    x = np.expand_dims(x, axis=0)$/;"	v
x	src/resnet152.py	/^    x = preprocess_input(x)$/;"	v
xgb	src/xg.py	/^import xgboost as xgb$/;"	i
xgc	src/xg.py	/^    xgc = xgb.XGBClassifier(base_score=0.6, colsample_bylevel=0.7, colsample_bytree=1,$/;"	v
